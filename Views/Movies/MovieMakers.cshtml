@*Niklas Ekstein 910723-3133
    View based on the MovieViewModel, creates a movie *@

@model MvcMovie.Models.Person

@{
    ViewData["Title"] = "MovieMakers";
}

<h1>MovieMakers</h1>

<div>
    <h4>Movie</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.FirstName)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.FirstName)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.LastName)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.LastName)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Role)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Role)
        </dd>


        <dd class="col-sm-10">

            @*<img src="@Url.Content(Model.ProfilePicture)" alt="Image" />*@

            <img src="~/images/@Model.ProfilePicture"
                 class="profile-photo"
                 height="120" width="80"
                 asp-append-version="true" />
        </dd>


    </dl>
</div>

<h4>Worked with:</h4>
@foreach (var item in Model.PersonContracts)
{
    <dd class="col-sm-10">
        <a asp-action="Index">@Html.DisplayFor(modelItem => item.ContractTitle)</a>
    </dd>
}

<div>
    <a asp-action="MovieMakers">Actors & directors list</a> |
    <a asp-action="Edit" asp-route-id="@Model.Id">Edit</a> |
    <a asp-action="Index">Back to List</a>
</div>
